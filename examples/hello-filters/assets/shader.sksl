// kind=shader

float mapRange(float value, float inMin, float inMax, float outMin, float outMax) {
    return ((value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin);
}

float B1(float t) {
    return t * t * t;
}

float B2(float t) {
    return 3.0 * t * t * (1.0 - t);
}

float B3(float t) {
    return 3.0 * t * (1.0 - t) * (1.0 - t);
}

float B4(float t) {
    return (1.0 - t) * (1.0 - t) * (1.0 - t);
}

// Cubic Bézier interpolation function
float bezier(float t, float4 params) {
    float u = 1.0 - t;  // The complement of t
    float tt = t * t;
    float uu = u * u;
    float ttt = tt * t;
    float uuu = uu * u;

    // Extract control points from params
    float x1 = params.x;
    float y1 = params.y;
    float x2 = params.z;
    float y2 = params.w;

    // Calculate the Bézier curve using the control points
    return (uuu * 0.0) +  // First point (0, 0)
    (3.0 * uu * t * y1) +  // First control point (x1, y1)
    (3.0 * u * tt * y2) +  // Second control point (x2, y2)
    (ttt * 1.0);  // Final point (1, 1)
}

float smoothWave(float t) {
    return sin(t * 3.141592653589793 * 0.15);  // sin(pi * t) oscillates from 0 to 1 to 0
}
const float4 easeOut = float4(0.0, 0.0, 0.58, 1.0);
const float4 easeIn = float4(0.42, 0.0, 1.0, 1.0);
const float4 easeInOut = float4(0.42, 0.0, 0.58, 1.0);
const float4 linear = float4(0.0, 0.0, 1.0, 1.0);
// bounce
const float4 bounce = float4(0.0, 0.0, 0.58, 1.0);
const float4 bounceIn = float4(0.42, 0.0, 1.0, 1.0);
const float4 bounceOut = float4(0.0, 0.0, 0.58, 1.0);
const float4 bounceInOut = float4(0.42, 0.0, 0.58, 1.0);
// back
const float4 back = float4(0.0, 0.0, 0.58, 1.0);
const float4 backIn = float4(0.42, 0.0, 1.0, 1.0);
const float4 backOut = float4(0.0, 0.0, 0.58, 1.0);
const float4 backInOut = float4(0.42, 0.0, 0.58, 1.0);
// elastic
const float4 elastic = float4(0.0, 0.0, 0.58, 1.0);
const float4 elasticIn = float4(0.42, 0.0, 1.0, 1.0);
const float4 elasticOut = float4(0.0, 0.0, 0.58, 1.0);
const float4 elasticInOut = float4(0.42, 0.0, 0.58, 1.0);

uniform shader content;
uniform float4 src_bounds;
uniform float4 dst_bounds;
uniform float progress;

half4 main(float2 fragCoord) {
    // different animation progress values with delays and velocities
    float progressScale = mapRange(progress, 0.0, 1.0, 0.0, 1.0);
    float progressSqueeze = mapRange(progress, 0.0, 0.8, 0.0, 1.0);
    float progressTranslation = mapRange(progress, 0.0, 0.8, 0.0, 1.0);
    // clamp progress values between 0.0 and 1.0
    progressSqueeze = clamp(progressSqueeze, 0.0, 1.0);
    progressTranslation = clamp(progressTranslation, 0.0, 1.0);
    progressScale = clamp(progressScale, 0.0, 1.0);

    // scale animation
    float finalScaleX = dst_bounds.z / src_bounds.z;
    float finalScaleY = dst_bounds.w / src_bounds.w;
    float finalScale = min(finalScaleX, finalScaleY);
    float scaleProgressY = bezier(progressScale, float4(.47, -0.21, .76, -0.03));
    float currentScaleY = mapRange(scaleProgressY, 0.0, 1.0, 1.0, finalScale);

    // translation animation
    float translationProgressY = bezier(progressTranslation, float4(.74, .04, 1, -0.03));
    float diffHeight = dst_bounds.w - src_bounds.w * currentScaleY - src_bounds.y;
    float centerDiffY = (finalScaleY * src_bounds.w - src_bounds.w * finalScale);
    float current_y = mix(src_bounds.y, dst_bounds.y + diffHeight - centerDiffY / 2.0, translationProgressY);

    float normalCoordY = mapRange(fragCoord.y, 0.0, (current_y + src_bounds.w * currentScaleY), 0.0, 1.0);

    // slitscan squeeze animation
    float slitScanProgressSqueeze = clamp(normalCoordY, 0.0, 1.0) * bezier(progressSqueeze, easeInOut);
    float smoothSlitScanProgressSqueeze = bezier(slitScanProgressSqueeze, easeIn);
    float centerDiffX = (finalScaleX * src_bounds.z - src_bounds.z * finalScale);

    float current_x = mix(src_bounds.x, dst_bounds.x - src_bounds.x + centerDiffX / 2.0, smoothSlitScanProgressSqueeze);

    float currentScaleX = mapRange(smoothSlitScanProgressSqueeze, 0.0, 1.0, 1.0, finalScale);

    float2 current = float2(current_x, current_y);

    float2 scale = float2(currentScaleX, currentScaleY);
    float2 current_point = (fragCoord - current) / scale;

    // motion blur
    float2 direction = float2(0.0, smoothWave(translationProgressY) * 40.0);
    const int samples = 10;
    half4 color = half4(0.0);
    float2 offset = direction / float(samples);
    for (int i = 0;
    i < 10;
    ++i) {
        color += content.eval(current_point + offset * float(i));
    }
    color = color / float(samples);

    return color;
}

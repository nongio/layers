(function() {
    var type_impls = Object.fromEntries([["lay_rs",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CRCHandle%3CN%3E%3E-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CRCHandle%3CN%3E%3E-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;RCHandle&lt;N&gt;&gt; for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;RCHandle&lt;N&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<RCHandle<N>>","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-Clone-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; RCHandle&lt;N&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConditionallySend-for-RCHandle%3CH%3E\" class=\"impl\"><a href=\"#impl-ConditionallySend-for-RCHandle%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; ConditionallySend for RCHandle&lt;H&gt;<div class=\"where\">where\n    H: NativeRefCountedBase,</div></h3></section></summary><div class=\"docblock\"><p><code>RCHandle&lt;H&gt;</code> is conditionally Send and can be sent to\nanother thread when its reference count is 1.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_send\" class=\"method trait-impl\"><a href=\"#method.can_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">can_send</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the handle can be sent to another thread.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_send\" class=\"method trait-impl\"><a href=\"#method.wrap_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrap_send</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Sendable&lt;RCHandle&lt;H&gt;&gt;, RCHandle&lt;H&gt;&gt;</h4></section></summary><div class='docblock'>Wrap the handle in a type that can be sent to another thread and unwrapped there. <a>Read more</a></div></details></div></details>","ConditionallySend","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,\n    RCHandle&lt;N&gt;: DebugAttributes,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RCHandle%3CSkImage%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RCHandle%3CSkImage%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RCHandle&lt;SkImage&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lay_rs::types::Image"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RCHandle%3CSkPicture%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RCHandle%3CSkPicture%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RCHandle&lt;SkPicture&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-RCHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-Deref-for-RCHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for RCHandle&lt;T&gt;<div class=\"where\">where\n    T: NativeRefCounted + NodeSubtype,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = RCHandle&lt;&lt;T as NodeSubtype&gt;::Base&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;RCHandle&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RCHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RCHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for RCHandle&lt;T&gt;<div class=\"where\">where\n    T: NativeRefCounted + NodeSubtype,</div></h3></section></summary><div class=\"docblock\"><p>This implementation of <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\"><code>DerefMut</code></a> causes subsequent UB when the containing\n[<code>RCHandle</code>] gets overwritten by a base type that does not match the actual\nunderlying type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;RCHandle&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-Drop-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Flattenable-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-Flattenable-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; Flattenable for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeFlattenable + NativeRefCountedBase,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.type_name\" class=\"method trait-impl\"><a href=\"#method.type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_name</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a></h4></section><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>(&amp;self) -&gt; RCHandle&lt;SkData&gt;</h4></section><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;N&gt;&gt;</h4></section></div></details>","Flattenable","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26RCHandle%3CN%3E%3E-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-From%3C%26RCHandle%3CN%3E%3E-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;RCHandle&lt;N&gt;&gt; for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,</div></h3></section></summary><div class=\"docblock\"><p>A reference counted handle is cheap to clone, so we do support a conversion\nfrom a reference to a ref counter to an owned handle.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(rch: &amp;RCHandle&lt;N&gt;) -&gt; RCHandle&lt;N&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&RCHandle<N>>","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted + NativePartialEq,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;RCHandle&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PointerWrapper%3CN%3E-for-RCHandle%3CN%3E\" class=\"impl\"><a href=\"#impl-PointerWrapper%3CN%3E-for-RCHandle%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N&gt; PointerWrapper&lt;N&gt; for RCHandle&lt;N&gt;<div class=\"where\">where\n    N: NativeRefCounted,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap\" class=\"method trait-impl\"><a href=\"#method.wrap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrap</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.pointer.html\">*mut N</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;N&gt;&gt;</h4></section></summary><div class='docblock'>Wraps a native pointer into a wrapper type.\nReturns <code>None</code> if the pointer is <code>null</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method trait-impl\"><a href=\"#method.unwrap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unwrap</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.pointer.html\">*mut N</a></h4></section></summary><div class='docblock'>Unwraps the wrapper type into the native pointer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner\" class=\"method trait-impl\"><a href=\"#method.inner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;N</a></h4></section></summary><div class='docblock'>Access the wrapped pointer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner_mut\" class=\"method trait-impl\"><a href=\"#method.inner_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">inner_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut N</a></h4></section></summary><div class='docblock'>Access the wrapped pointer.</div></details></div></details>","PointerWrapper<N>","lay_rs::types::Image","lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RCHandle%3CSkImage%3E\" class=\"impl\"><a href=\"#impl-RCHandle%3CSkImage%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RCHandle&lt;SkImage&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raster_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_raster_data</a>(\n    info: &amp;Handle&lt;SkImageInfo&gt;,\n    pixels: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkData&gt;&gt;,\n    row_bytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::raster_from_data()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from [<code>ImageInfo</code>], sharing pixels.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned if [<code>ImageInfo</code>] is valid. Valid [<code>ImageInfo</code>] parameters include:\ndimensions are greater than zero;\neach dimension fits in 29 bits;\n[<code>ColorType</code>] and [<code>AlphaType</code>] are valid, and [<code>ColorType</code>] is not [<code>ColorType::Unknown</code>];\nrowBytes are large enough to hold one row of pixels;\npixels is not nullptr, and contains enough data for <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.</p>\n<ul>\n<li><code>info</code>       contains width, height, [<code>AlphaType</code>], [<code>ColorType</code>], [<code>ColorSpace</code>]</li>\n<li><code>pixels</code>     address or pixel storage</li>\n<li><code>rowBytes</code>   size of pixel row or larger</li>\n</ul>\n<p>Returns: <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> sharing pixels, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bitmap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bitmap</a>(bitmap: &amp;Handle&lt;SkBitmap&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::raster_from_bitmap()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from bitmap, sharing or copying bitmap pixels. If the bitmap\nis marked immutable, and its pixel memory is shareable, it may be shared\ninstead of copied.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned if bitmap is valid. Valid [<code>Bitmap</code>] parameters include:\ndimensions are greater than zero;\neach dimension fits in 29 bits;\n[<code>ColorType</code>] and [<code>AlphaType</code>] are valid, and [<code>ColorType</code>] is not [<code>ColorType::Unknown</code>];\nrow bytes are large enough to hold one row of pixels;\npixel address is not <code>null</code>.</p>\n<ul>\n<li><code>bitmap</code>   [<code>ImageInfo</code>], row bytes, and pixels</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_MakeFromBitmap\">https://fiddle.skia.org/c/@Image_MakeFromBitmap</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_generator\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_generator</a>(\n    image_generator: RefHandle&lt;SkImageGenerator&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::deferred_from_generator()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from data returned by <code>image_generator</code>. Generated data is owned by <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> and\nmay not be shared or accessed.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned if generator data is valid. Valid data parameters vary by type of data\nand platform.</p>\n<p>imageGenerator may wrap <a href=\"lay_rs/types/type.Picture.html\" title=\"type lay_rs::types::Picture\"><code>Picture</code></a> data, codec data, or custom data.</p>\n<ul>\n<li><code>image_generator</code>   stock or custom routines to retrieve <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_encoded\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_encoded</a>(\n    data: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkData&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>See [<code>Self::from_encoded_with_alpha_type()</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_encoded_with_alpha_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_encoded_with_alpha_type</a>(\n    data: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkData&gt;&gt;,\n    alpha_type: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SkAlphaType&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Return an image backed by the encoded data, but attempt to defer decoding until the image\nis actually used/drawn. This deferral allows the system to cache the result, either on the\nCPU or on the GPU, depending on where the image is drawn. If memory is low, the cache may\nbe purged, causing the next draw of the image to have to re-decode.</p>\n<p>If alphaType is <code>None</code>, the image’s alpha type will be chosen automatically based on the\nimage format. Transparent images will default to [<code>AlphaType::Premul</code>]. If alphaType contains\n[<code>AlphaType::Premul</code>] or [<code>AlphaType::Unpremul</code>], that alpha type will be used. Forcing opaque\n(passing [<code>AlphaType::Opaque</code>]) is not allowed, and will return nullptr.</p>\n<p>This is similar to <code>decode_to_{raster,texture}</code>, but this method will attempt to defer the\nactual decode, while the <code>decode_to</code>… method explicitly decode and allocate the backend\nwhen the call is made.</p>\n<p>If the encoded format is not supported, <code>None</code> is returned.</p>\n<ul>\n<li><code>encoded</code>   the encoded data</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_MakeFromEncoded\">https://fiddle.skia.org/c/@Image_MakeFromEncoded</a></p>\n</div></details><section id=\"method.decode_to_raster\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">decode_to_raster</a>(_encoded: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u8.html\">u8</a>], _subset: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;IRect&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.never.html\">!</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.35.0: Removed without replacement</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_raster_from_compressed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_raster_from_compressed</a>(\n    data: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkData&gt;&gt;,\n    dimensions: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ISize&gt;,\n    ty: SkTextureCompressionType,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::raster_from_compressed_texture_data()</span></div></span></summary><div class=\"docblock\"><p>Creates a CPU-backed <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from compressed data.</p>\n<p>This method will decompress the compressed data and create an image wrapping\nit. Any mipmap levels present in the compressed data are discarded.</p>\n<ul>\n<li><code>data</code>      compressed data to store in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>width</code>     width of full <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>height</code>    height of full <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>ty</code>        type of compression used</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_picture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_picture</a>(\n    picture: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkPicture&gt;&gt;,\n    dimensions: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ISize&gt;,\n    matrix: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\">Matrix</a>&gt;,\n    paint: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Handle&lt;SkPaint&gt;&gt;,\n    bit_depth: SkImages_BitDepth,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::deferred_from_picture()</span></div></span></summary><div class=\"docblock\"><p>See [<code>Self::from_picture_with_props()</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_picture_with_props\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_picture_with_props</a>(\n    picture: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkPicture&gt;&gt;,\n    dimensions: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ISize&gt;,\n    matrix: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\">Matrix</a>&gt;,\n    paint: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Handle&lt;SkPaint&gt;&gt;,\n    bit_depth: SkImages_BitDepth,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n    props: SurfaceProps,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use images::deferred_from_picture()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from picture. Returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> width and height are set by dimensions.\n<a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> draws picture with matrix and paint, set to bitDepth and colorSpace.</p>\n<p>If matrix is <code>None</code>, draws with identity <a href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\"><code>Matrix</code></a>. If paint is <code>None</code>, draws\nwith default [<code>Paint</code>]. color_space may be <code>None</code>.</p>\n<ul>\n<li><code>picture</code>      stream of drawing commands</li>\n<li><code>dimensions</code>   width and height</li>\n<li><code>matrix</code>       <a href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\"><code>Matrix</code></a> to rotate, scale, translate, and so on; may be <code>None</code></li>\n<li><code>paint</code>        [<code>Paint</code>] to apply transparency, filtering, and so on; may be <code>None</code></li>\n<li><code>bitDepth</code>     8-bit integer or 16-bit float: per component</li>\n<li><code>color_space</code>  range of colors; may be <code>None</code></li>\n<li><code>props</code>        props to use when rasterizing the picture</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_texture_from_compressed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_texture_from_compressed</a>(\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    data: RCHandle&lt;SkData&gt;,\n    dimensions: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ISize&gt;,\n    ty: SkTextureCompressionType,\n    mipmapped: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;skgpu_Mipmapped&gt;&gt;,\n    is_protected: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;skgpu_Protected&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::texture_from_compressed_texture_data()</span></div></span></summary><div class=\"docblock\"><p>Creates a GPU-backed <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from compressed data.</p>\n<p>This method will return an <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> representing the compressed data.\nIf the GPU doesn’t support the specified compression method, the data\nwill be decompressed and then wrapped in a GPU-backed image.</p>\n<p>Note: one can query the supported compression formats via\n[<code>gpu::RecordingContext::compressed_backend_format</code>].</p>\n<ul>\n<li><code>context</code>      GPU context</li>\n<li><code>data</code>         compressed data to store in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>width</code>        width of full <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>height</code>       height of full <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>ty</code>           type of compression used</li>\n<li><code>mipmapped</code>    does ‘data’ contain data for all the mipmap levels?</li>\n<li><code>is_protected</code>  do the contents of ‘data’ require DRM protection (on Vulkan)?</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><section id=\"method.from_compressed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_compressed</a>(\n    _context: &amp;mut RCHandle&lt;GrRecordingContext&gt;,\n    _data: RCHandle&lt;SkData&gt;,\n    _dimensions: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ISize&gt;,\n    _ct: SkTextureCompressionType,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.never.html\">!</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.35.0: Removed without replacement</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_texture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_texture</a>(\n    context: &amp;mut RCHandle&lt;GrRecordingContext&gt;,\n    backend_texture: &amp;RefHandle&lt;GrBackendTexture&gt;,\n    origin: GrSurfaceOrigin,\n    color_type: ColorType,\n    alpha_type: SkAlphaType,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from GPU texture associated with context. GPU texture must stay\nvalid and unchanged until <code>texture_release_proc</code> is called. <code>texture_release_proc</code> is\npassed <code>release_context</code> when <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is deleted or no longer refers to texture.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned if format of <code>backend_texture</code> is recognized and supported.\nRecognized formats vary by GPU back-end.</p>\n<p>Note: When using a DDL recording context, <code>texture_release_proc</code> will be called on the\nGPU thread after the DDL is played back on the direct context.</p>\n<ul>\n<li><code>context</code>               GPU context</li>\n<li><code>backend_texture</code>       Texture residing on GPU</li>\n<li><code>origin</code>                Origin of <code>backend_texture</code></li>\n<li><code>color_type</code>            Color type of the resulting image</li>\n<li><code>alpha_type</code>            Alpha type of the resulting image</li>\n<li><code>color_space</code>           This describes the color space of this image’s contents, as\nseen after sampling. In general, if the format of the backend\ntexture is SRGB, some linear <code>color_space</code> should be supplied\n(e.g., [<code>ColorSpace::new_srgb_linear()</code>])). If the format of the\nbackend texture is linear, then the <code>color_space</code> should include\na description of the transfer function as\nwell (e.g., <a href=\"\"><code>ColorSpace::MakeSRGB</code></a>).</li>\n<li><code>texture_release_proc</code>  Function called when texture can be released</li>\n<li><code>release_context</code>       State passed to <code>texture_release_proc</code></li>\n</ul>\n<p>Returns: Created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><section id=\"method.from_pixmap_cross_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_pixmap_cross_context</a>(\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    pixmap: &amp;Pixmap&lt;'_&gt;,\n    build_mips: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,\n    limit_to_max_texture_size: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.27.0: renamed, use new_cross_context_from_pixmap</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_cross_context_from_pixmap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_cross_context_from_pixmap</a>(\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    pixmap: &amp;Pixmap&lt;'_&gt;,\n    build_mips: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,\n    limit_to_max_texture_size: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::cross_context_texture_from_pixmap()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from pixmap. <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is uploaded to GPU back-end using context.</p>\n<p>Created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is available to other GPU contexts, and is available across thread\nboundaries. All contexts must be in the same GPU share group, or otherwise\nshare resources.</p>\n<p>When <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is no longer referenced, context releases texture memory\nasynchronously.</p>\n<p>[<code>ColorSpace</code>] of <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is determined by <code>pixmap.color_space()</code>.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned referring to GPU back-end if context is not <code>None</code>,\nformat of data is recognized and supported, and if context supports moving\nresources between contexts. Otherwise, pixmap pixel data is copied and <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>\nas returned in raster format if possible; <code>None</code> may be returned.\nRecognized GPU formats vary by platform and GPU back-end.</p>\n<ul>\n<li><code>context</code>                 GPU context</li>\n<li><code>pixmap</code>                  [<code>ImageInfo</code>], pixel address, and row bytes</li>\n<li><code>build_mips</code>               create <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> as mip map if <code>true</code></li>\n<li><code>limit_to_max_texture_size</code>   downscale image to GPU maximum texture size, if necessary</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_adopted_texture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_adopted_texture</a>(\n    context: &amp;mut RCHandle&lt;GrRecordingContext&gt;,\n    backend_texture: &amp;RefHandle&lt;GrBackendTexture&gt;,\n    texture_origin: GrSurfaceOrigin,\n    color_type: ColorType,\n    alpha_type: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SkAlphaType&gt;&gt;,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::adopt_texture_from()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from <code>backend_texture</code> associated with context. <code>backend_texture</code> and\nreturned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> are managed internally, and are released when no longer needed.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is returned if format of <code>backend_texture</code> is recognized and supported.\nRecognized formats vary by GPU back-end.</p>\n<ul>\n<li><code>context</code>          GPU context</li>\n<li><code>backend_texture</code>   texture residing on GPU</li>\n<li><code>texture_origin</code>    origin of <code>backend_texture</code></li>\n<li><code>color_type</code>        color type of the resulting image</li>\n<li><code>alpha_type</code>        alpha type of the resulting image</li>\n<li><code>color_space</code>       range of colors; may be <code>None</code></li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_yuva_textures\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_yuva_textures</a>(\n    context: &amp;mut RCHandle&lt;GrRecordingContext&gt;,\n    yuva_textures: &amp;Handle&lt;GrYUVABackendTextures&gt;,\n    image_color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::texture_from_yuva_textures()</span></div></span></summary><div class=\"docblock\"><p>Creates an <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from <code>YUV[A]</code> planar textures. This requires that the textures stay valid\nfor the lifetime of the image. The <code>ReleaseContext</code> can be used to know when it is safe to\neither delete or overwrite the textures. If <code>ReleaseProc</code> is provided it is also called before\nreturn on failure.</p>\n<ul>\n<li><code>context</code>             GPU context</li>\n<li><code>yuva_textures</code>        A set of textures containing YUVA data and a description of the\ndata and transformation to RGBA.</li>\n<li><code>image_color_space</code>     range of colors of the resulting image after conversion to RGB;\nmay be <code>None</code></li>\n<li><code>texture_release_proc</code>  called when the backend textures can be released</li>\n<li><code>release_context</code>      state passed to <code>texture_release_proc</code></li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_yuva_pixmaps\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_yuva_pixmaps</a>(\n    context: &amp;mut RCHandle&lt;GrRecordingContext&gt;,\n    yuva_pixmaps: &amp;Handle&lt;SkYUVAPixmaps&gt;,\n    build_mips: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;skgpu_Mipmapped&gt;&gt;,\n    limit_to_max_texture_size: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>&gt;&gt;,\n    image_color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::texture_from_yuva_pixmaps()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from [<code>crate::YUVAPixmaps</code>].</p>\n<p>The image will remain planar with each plane converted to a texture using the passed\n[<code>gpu::RecordingContext</code>].</p>\n<p>[<code>crate::YUVAPixmaps</code>] has a [<code>crate::YUVAInfo</code>] which specifies the transformation from YUV to RGB.\nThe [<code>ColorSpace</code>] of the resulting RGB values is specified by <code>image_color_space</code>. This will\nbe the [<code>ColorSpace</code>] reported by the image and when drawn the RGB values will be converted\nfrom this space into the destination space (if the destination is tagged).</p>\n<p>Currently, this is only supported using the GPU backend and will fail if context is <code>None</code>.</p>\n<p>[<code>crate::YUVAPixmaps</code>] does not need to remain valid after this returns.</p>\n<ul>\n<li><code>context</code>                 GPU context</li>\n<li><code>pixmaps</code>                 The planes as pixmaps with supported [<code>crate::YUVAInfo</code>] that\nspecifies conversion to RGB.</li>\n<li><code>build_mips</code>               create internal YUVA textures as mip map if <code>Yes</code>. This is\nsilently ignored if the context does not support mip maps.</li>\n<li><code>limit_to_max_texture_size</code>   downscale image to GPU maximum texture size, if necessary</li>\n<li><code>image_color_space</code>         range of colors of the resulting image; may be <code>None</code></li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><section id=\"method.from_nv12_textures_copy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_nv12_textures_copy</a>(\n    _context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    _yuv_color_space: SkYUVColorSpace,\n    _nv12_textures: &amp;[RefHandle&lt;GrBackendTexture&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.array.html\">2</a>],\n    _image_origin: GrSurfaceOrigin,\n    _image_color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.never.html\">!</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.37.0: Removed without replacement</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.image_info\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">image_info</a>(&amp;self) -&gt; &amp;Handle&lt;SkImageInfo&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a [<code>ImageInfo</code>] describing the width, height, color type, alpha type, and color space\nof the <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.</p>\n<p>Returns: image info of <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.width\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Returns pixel count in each row.</p>\n<p>Returns: pixel width in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.height\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">height</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Returns pixel row count.</p>\n<p>Returns: pixel height in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dimensions\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dimensions</a>(&amp;self) -&gt; ISize</h4></section></summary><div class=\"docblock\"><p>Returns [<code>ISize</code>] <code>{ width(), height() }</code>.</p>\n<p>Returns: integral size of <code>width()</code> and <code>height()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bounds\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bounds</a>(&amp;self) -&gt; IRect</h4></section></summary><div class=\"docblock\"><p>Returns [<code>IRect</code>] <code>{ 0, 0, width(), height() }</code>.</p>\n<p>Returns: integral rectangle from origin to <code>width()</code> and <code>height()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unique_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unique_id</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns value unique to image. <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> contents cannot change after <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is\ncreated. Any operation to create a new <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> will receive generate a new\nunique number.</p>\n<p>Returns: unique identifier</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alpha_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alpha_type</a>(&amp;self) -&gt; SkAlphaType</h4></section></summary><div class=\"docblock\"><p>Returns [<code>AlphaType</code>].</p>\n<p>[<code>AlphaType</code>] returned was a parameter to an <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> constructor,\nor was parsed from encoded data.</p>\n<p>Returns: [<code>AlphaType</code>] in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_alphaType\">https://fiddle.skia.org/c/@Image_alphaType</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">color_type</a>(&amp;self) -&gt; ColorType</h4></section></summary><div class=\"docblock\"><p>Returns [<code>ColorType</code>] if known; otherwise, returns [<code>ColorType::Unknown</code>].</p>\n<p>Returns: [<code>ColorType</code>] of <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_colorType\">https://fiddle.skia.org/c/@Image_colorType</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.color_space\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">color_space</a>(&amp;self) -&gt; RCHandle&lt;SkColorSpace&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a smart pointer to [<code>ColorSpace</code>], the range of colors, associated with\n<a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.  The smart pointer tracks the number of objects sharing this\n[<code>ColorSpace</code>] reference so the memory is released when the owners destruct.</p>\n<p>The returned [<code>ColorSpace</code>] is immutable.</p>\n<p>[<code>ColorSpace</code>] returned was passed to an <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> constructor,\nor was parsed from encoded data. [<code>ColorSpace</code>] returned may be ignored when <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>\nis drawn, depending on the capabilities of the [<code>crate::Surface</code>] receiving the drawing.</p>\n<p>Returns: [<code>ColorSpace</code>] in <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code>, wrapped in a smart pointer</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_refColorSpace\">https://fiddle.skia.org/c/@Image_refColorSpace</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_alpha_only\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_alpha_only</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> pixels represent transparency only. If <code>true</code>, each pixel\nis packed in 8 bits as defined by [<code>ColorType::Alpha8</code>].</p>\n<p>Returns: <code>true</code> if pixels represent a transparency mask</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_isAlphaOnly\">https://fiddle.skia.org/c/@Image_isAlphaOnly</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_opaque\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_opaque</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if pixels ignore their alpha value and are treated as fully opaque.</p>\n<p>Returns: <code>true</code> if [<code>AlphaType</code>] is [<code>AlphaType::Opaque</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_shader\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_shader</a>&lt;'a&gt;(\n    &amp;self,\n    tile_modes: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(SkTileMode, SkTileMode)&gt;&gt;,\n    sampling: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;SamplingOptions&gt;,\n    local_matrix: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"struct\" href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\">Matrix</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkShader&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Make a shader with the specified tiling and mipmap sampling.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_shader\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_raw_shader</a>&lt;'a&gt;(\n    &amp;self,\n    tile_modes: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(SkTileMode, SkTileMode)&gt;&gt;,\n    sampling: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;SamplingOptions&gt;,\n    local_matrix: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"struct\" href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\">Matrix</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkShader&gt;&gt;</h4></section></summary><div class=\"docblock\"><p><code>to_raw_shader</code> functions like <code>to_shader</code>, but for images that contain non-color data.\nThis includes images encoding things like normals, material properties (eg, roughness),\nheightmaps, or any other purely mathematical data that happens to be stored in an image.\nThese types of images are useful with some programmable shaders (see: [<code>crate::RuntimeEffect</code>]).</p>\n<p>Raw image shaders work like regular image shaders (including filtering and tiling), with\na few major differences:</p>\n<ul>\n<li>No color space transformation is ever applied (the color space of the image is ignored).</li>\n<li>Images with an alpha type of <code>Unpremul</code> are <em>not</em> automatically premultiplied.</li>\n<li>Bicubic filtering is not supported. If [<code>SamplingOptions::use_cubic</code>] is <code>true</code>, these\nfactories will return <code>None</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">peek_pixels</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Pixmap&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> pixel address, row bytes, and [<code>ImageInfo</code>] to pixmap, if address\nis available, and returns <code>true</code>. If pixel address is not available, return\n<code>false</code> and leave pixmap unchanged.</p>\n<ul>\n<li><code>pixmap</code>   storage for pixel state if pixels are readable; otherwise, ignored</li>\n</ul>\n<p>Returns: <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> has direct access to pixels</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_peekPixels\">https://fiddle.skia.org/c/@Image_peekPixels</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_texture_backed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_texture_backed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the contents of <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> was created on or uploaded to GPU memory,\nand is available as a GPU texture.</p>\n<p>Returns: <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is a GPU texture</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_isTextureBacked\">https://fiddle.skia.org/c/@Image_isTextureBacked</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.texture_size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">texture_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns an approximation of the amount of texture memory used by the image. Returns\nzero if the image is not texture backed or if the texture has an external format.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_valid</a>(&amp;self, context: &amp;mut RCHandle&lt;GrRecordingContext&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> can be drawn on either raster surface or GPU surface.\nIf context is <code>None</code>, tests if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> draws on raster surface;\notherwise, tests if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> draws on GPU surface associated with context.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture may become invalid if associated context is\ninvalid. lazy image may be invalid and may not draw to raster surface or\nGPU surface or both.</p>\n<ul>\n<li><code>context</code>   GPU context</li>\n</ul>\n<p>Returns: <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> can be drawn</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_isValid\">https://fiddle.skia.org/c/@Image_isValid</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_scaled\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">make_scaled</a>(\n    &amp;self,\n    info: &amp;Handle&lt;SkImageInfo&gt;,\n    scaling: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;SamplingOptions&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new image by copying this image and scaling to fit the [<code>ImageInfo</code>]’s dimensions\nand converting the pixels into the ImageInfo’s [<code>crate::ColorInfo</code>].</p>\n<p>This is done retaining the domain (backend) of the image (e.g. gpu, raster).</p>\n<p>Returns <code>None</code> if the requested [<code>crate::ColorInfo</code>] is not supported, its dimensions are out\nof range.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush</a>&lt;'a&gt;(\n    &amp;self,\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    flush_info: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a FlushInfo&gt;&gt;,\n) -&gt; GrSemaphoresSubmitted</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::DirectContext::flush()</span></div></span></summary><div class=\"docblock\"><p>See [<code>Self::flush_with_info()</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush_with_info\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush_with_info</a>(\n    &amp;self,\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    flush_info: &amp;FlushInfo,\n) -&gt; GrSemaphoresSubmitted</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.46.0: use gpu::DirectContext::flush()</span></div></span></summary><div class=\"docblock\"><p>Flushes any pending uses of texture-backed images in the GPU backend. If the image is not\ntexture-backed (including promise texture images) or if the [<code>gpu::DirectContext</code>] does not\nhave the same context ID as the context backing the image then this is a no-op.</p>\n<p>If the image was not used in any non-culled draws in the current queue of work for the\npassed [<code>gpu::DirectContext</code>] then this is a no-op unless the [<code>gpu::FlushInfo</code>] contains semaphores or\na finish proc. Those are respected even when the image has not been used.</p>\n<ul>\n<li><code>context</code>   the context on which to flush pending usages of the image.</li>\n<li><code>info</code>      flush options</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush_and_submit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush_and_submit</a>(&amp;self, context: &amp;mut RCHandle&lt;GrDirectContext&gt;)</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::DirectContext::flush_and_submit()</span></div></span></summary><div class=\"docblock\"><p>Version of <code>flush()</code> that uses a default [<code>gpu::FlushInfo</code>]. Also submits the flushed work to the\nGPU.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backend_texture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">backend_texture</a>(\n    &amp;self,\n    flush_pending_gr_context_io: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(RefHandle&lt;GrBackendTexture&gt;, GrSurfaceOrigin)&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: use gpu::images::get_backend_texture_from_image()</span></div></span></summary><div class=\"docblock\"><p>Retrieves the back-end texture. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> has no back-end texture, <code>None</code>is returned.</p>\n<p>If <code>flush_pending_gr_context_io</code> is <code>true</code>, completes deferred I/O operations.</p>\n<p>If origin in not <code>None</code>, copies location of content drawn into <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.</p>\n<ul>\n<li><code>flush_pending_gr_context_io</code>   flag to flush outstanding requests</li>\n</ul>\n<p>Returns: back-end API texture handle; invalid on failure</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_pixels_with_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read_pixels_with_context</a>&lt;'a, P&gt;(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    dst_info: &amp;Handle&lt;SkImageInfo&gt;,\n    pixels: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html\">[P]</a>,\n    dst_row_bytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n    src: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IPoint&gt;,\n    caching_hint: SkImage_CachingHint,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Copies [<code>crate::Rect</code>] of pixels from <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> to <code>dst_pixels</code>. Copy starts at offset (<code>src_x</code>, <code>src_y</code>),\nand does not exceed <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> (width(), height()).</p>\n<p>Graphite has deprecated this API in favor of the equivalent asynchronous API on\n<code>skgpu::graphite::Context</code> (with an optional explicit synchronization).</p>\n<p><code>dst_info</code> specifies width, height, [<code>ColorType</code>], [<code>AlphaType</code>], and [<code>ColorSpace</code>] of\ndestination. <code>dst_row_bytes</code> specifies the gap from one destination row to the next.\nReturns <code>true</code> if pixels are copied. Returns <code>false</code> if:</p>\n<ul>\n<li><code>dst_info</code>.<code>addr()</code> equals <code>None</code></li>\n<li><code>dst_row_bytes</code> is less than <code>dst_info.min_row_bytes()</code></li>\n<li>[<code>crate::PixelRef</code>] is <code>None</code></li>\n</ul>\n<p>Pixels are copied only if pixel conversion is possible. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is\n[<code>ColorType::Gray8</code>], or [<code>ColorType::Alpha8</code>]; <code>dst_info.color_type()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is [<code>ColorType::Gray8</code>], <code>dst_info</code>.<code>color_space()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>AlphaType</code>] is [<code>AlphaType::Opaque</code>], <code>dst_info</code>.<code>alpha_type()</code> must\nmatch. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] is <code>None</code>, <code>dst_info.color_space()</code> must match. Returns\n<code>false</code> if pixel conversion is not possible.</p>\n<p><code>src_x</code> and <code>src_y</code> may be negative to copy only top or left of source. Returns\n<code>false</code> if <code>width()</code> or <code>height()</code> is zero or negative.\nReturns <code>false</code> if abs(<code>src_x</code>) &gt;= Image width(), or if abs(<code>src_y</code>) &gt;= Image height().</p>\n<p>If <code>caching_hint</code> is [<code>CachingHint::Allow</code>], pixels may be retained locally.\nIf <code>caching_hint</code> is [<code>CachingHint::Disallow</code>], pixels are not added to the local cache.</p>\n<ul>\n<li><code>context</code>       the [<code>gpu::DirectContext</code>] in play, if it exists</li>\n<li><code>dst_info</code>       destination width, height, [<code>ColorType</code>], [<code>AlphaType</code>], [<code>ColorSpace</code>]</li>\n<li><code>dst_pixels</code>     destination pixel storage</li>\n<li><code>dst_row_bytes</code>   destination row length</li>\n<li><code>src_x</code>          column index whose absolute value is less than <code>width()</code></li>\n<li><code>src_y</code>          row index whose absolute value is less than <code>height()</code></li>\n<li><code>caching_hint</code>   whether the pixels should be cached locally</li>\n</ul>\n<p>Returns: <code>true</code> if pixels are copied to <code>dst_pixels</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_pixels_to_pixmap_with_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read_pixels_to_pixmap_with_context</a>&lt;'a&gt;(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    dst: &amp;Pixmap&lt;'_&gt;,\n    src: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IPoint&gt;,\n    caching_hint: SkImage_CachingHint,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Copies a [<code>crate::Rect</code>] of pixels from <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> to dst. Copy starts at (<code>src_x</code>, <code>src_y</code>), and\ndoes not exceed <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> (width(), height()).</p>\n<p>Graphite has deprecated this API in favor of the equivalent asynchronous API on\n<code>skgpu::graphite::Context</code> (with an optional explicit synchronization).</p>\n<p>dst specifies width, height, [<code>ColorType</code>], [<code>AlphaType</code>], [<code>ColorSpace</code>], pixel storage,\nand row bytes of destination. dst.<code>row_bytes()</code> specifics the gap from one destination\nrow to the next. Returns <code>true</code> if pixels are copied. Returns <code>false</code> if:</p>\n<ul>\n<li>dst pixel storage equals <code>None</code></li>\n<li>dst.<code>row_bytes</code> is less than [<code>ImageInfo::min_row_bytes</code>]</li>\n<li>[<code>crate::PixelRef</code>] is <code>None</code></li>\n</ul>\n<p>Pixels are copied only if pixel conversion is possible. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is\n[<code>ColorType::Gray8</code>], or [<code>ColorType::Alpha8</code>]; dst.<code>color_type()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is [<code>ColorType::Gray8</code>], dst.<code>color_space()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>AlphaType</code>] is [<code>AlphaType::Opaque</code>], dst.<code>alpha_type()</code> must\nmatch. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] is <code>None</code>, dst.<code>color_space()</code> must match. Returns\n<code>false</code> if pixel conversion is not possible.</p>\n<p><code>src_x</code> and <code>src_y</code> may be negative to copy only top or left of source. Returns\n<code>false</code> if <code>width()</code> or <code>height()</code> is zero or negative.\nReturns <code>false</code> if abs(<code>src_x</code>) &gt;= Image width(), or if abs(<code>src_y</code>) &gt;= Image height().</p>\n<p>If <code>caching_hint</code> is [<code>CachingHint::Allow</code>], pixels may be retained locally.\nIf <code>caching_hint</code> is [<code>CachingHint::Disallow</code>], pixels are not added to the local cache.</p>\n<ul>\n<li><code>context</code>       the [<code>gpu::DirectContext</code>] in play, if it exists</li>\n<li><code>dst</code>           destination [<code>Pixmap</code>]:[<code>ImageInfo</code>], pixels, row bytes</li>\n<li><code>src_x</code>          column index whose absolute value is less than <code>width()</code></li>\n<li><code>src_y</code>          row index whose absolute value is less than <code>height()</code></li>\n<li><code>caching_hint</code>   whether the pixels should be cached <code>locally_z</code></li>\n</ul>\n<p>Returns: <code>true</code> if pixels are copied to dst</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read_pixels</a>&lt;P&gt;(\n    &amp;self,\n    dst_info: &amp;Handle&lt;SkImageInfo&gt;,\n    pixels: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html\">[P]</a>,\n    dst_row_bytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n    src: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IPoint&gt;,\n    caching_hint: SkImage_CachingHint,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>See [<code>Self::read_pixels_with_context()</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_pixels_to_pixmap\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">read_pixels_to_pixmap</a>(\n    &amp;self,\n    dst: &amp;Pixmap&lt;'_&gt;,\n    src: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IPoint&gt;,\n    caching_hint: SkImage_CachingHint,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>See [<code>Self::read_pixels_to_pixmap_with_context()</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale_pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">scale_pixels</a>(\n    &amp;self,\n    dst: &amp;Pixmap&lt;'_&gt;,\n    sampling: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;SamplingOptions&gt;,\n    caching_hint: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SkImage_CachingHint&gt;&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> to dst, scaling pixels to fit <code>dst.width()</code> and <code>dst.height()</code>, and\nconverting pixels to match <code>dst.color_type()</code> and <code>dst.alpha_type()</code>. Returns <code>true</code> if\npixels are copied. Returns <code>false</code> if <code>dst.addr()</code> is <code>None</code>, or <code>dst.row_bytes()</code> is\nless than dst [<code>ImageInfo::min_row_bytes</code>].</p>\n<p>Pixels are copied only if pixel conversion is possible. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is\n[<code>ColorType::Gray8</code>], or [<code>ColorType::Alpha8</code>]; <code>dst.color_type()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorType</code>] is [<code>ColorType::Gray8</code>], <code>dst.color_space()</code> must match.\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>AlphaType</code>] is [<code>AlphaType::Opaque</code>], <code>dst.alpha_type()</code> must\nmatch. If <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] is <code>None</code>, <code>dst.color_space()</code> must match. Returns\n<code>false</code> if pixel conversion is not possible.</p>\n<p>If <code>caching_hint</code> is [<code>CachingHint::Allow</code>], pixels may be retained locally.\nIf <code>caching_hint</code> is [<code>CachingHint::Disallow</code>], pixels are not added to the local cache.</p>\n<ul>\n<li><code>dst</code>             destination [<code>Pixmap</code>]:[<code>ImageInfo</code>], pixels, row bytes</li>\n</ul>\n<p>Returns: <code>true</code> if pixels are scaled to fit dst</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_data_with_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">encode_to_data_with_context</a>(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    image_format: SkEncodedImageFormat,\n    quality: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u32.html\">u32</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkData&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: Use encode</span></div></span></summary><div class=\"docblock\"><p>Encodes <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> pixels, returning result as [<code>Data</code>].</p>\n<p>Returns <code>None</code> if encoding fails, or if <code>encoded_image_format</code> is not supported.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> encoding in a format requires both building with one or more of:\nSK_ENCODE_JPEG, SK_ENCODE_PNG, SK_ENCODE_WEBP; and platform support\nfor the encoded format.</p>\n<p>If SK_BUILD_FOR_MAC or SK_BUILD_FOR_IOS is defined, <code>encoded_image_format</code> can\nadditionally be one of: [<code>EncodedImageFormat::ICO</code>], [<code>EncodedImageFormat::BMP</code>],\n[<code>EncodedImageFormat::GIF</code>].</p>\n<p>quality is a platform and format specific metric trading off size and encoding\nerror. When used, quality equaling 100 encodes with the least error. quality may\nbe ignored by the encoder.</p>\n<ul>\n<li><code>context</code> - the [<code>gpu::DirectContext</code>] in play, if it exists; can be <code>None</code></li>\n<li><code>encoded_image_format</code> - one of: [<code>EncodedImageFormat::JPEG</code>], [<code>EncodedImageFormat::PNG</code>],\n[<code>EncodedImageFormat::WEBP</code>]</li>\n<li><code>quality</code> - encoder specific metric with 100 equaling best</li>\n</ul>\n<p>Returns: encoded <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_encodeToData\">https://fiddle.skia.org/c/@Image_encodeToData</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">encode_to_data</a>(\n    &amp;self,\n    image_format: SkEncodedImageFormat,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkData&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: Support for encoding GPU backed images without a context was removed, use <code>encode_to_data_with_context</code> instead</span></div></span></summary><div class=\"docblock\"><p>See [<code>Self::encode_to_data_with_quality</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_data_with_quality\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">encode_to_data_with_quality</a>(\n    &amp;self,\n    image_format: SkEncodedImageFormat,\n    quality: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkData&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.63.0: Support for encoding GPU backed images without a context was removed, use <code>encode_to_data_with_context</code> instead</span></div></span></summary><div class=\"docblock\"><p>Encodes <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> pixels, returning result as [<code>Data</code>].</p>\n<p>Returns <code>None</code> if encoding fails, or if <code>encoded_image_format</code> is not supported.</p>\n<p><a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> encoding in a format requires both building with one or more of:\nSK_ENCODE_JPEG, SK_ENCODE_PNG, SK_ENCODE_WEBP; and platform support\nfor the encoded format.</p>\n<p>If SK_BUILD_FOR_MAC or SK_BUILD_FOR_IOS is defined, <code>encoded_image_format</code> can\nadditionally be one of: [<code>EncodedImageFormat::ICO</code>], [<code>EncodedImageFormat::BMP</code>],\n[<code>EncodedImageFormat::GIF</code>].</p>\n<p>quality is a platform and format specific metric trading off size and encoding\nerror. When used, quality equaling 100 encodes with the least error. quality may\nbe ignored by the encoder.</p>\n<ul>\n<li><code>encoded_image_format</code>   one of: [<code>EncodedImageFormat::JPEG</code>], [<code>EncodedImageFormat::PNG</code>],\n[<code>EncodedImageFormat::WEBP</code>]</li>\n<li><code>quality</code>              encoder specific metric with 100 equaling best</li>\n</ul>\n<p>Returns: encoded <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_encodeToData\">https://fiddle.skia.org/c/@Image_encodeToData</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">encoded_data</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkData&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns encoded <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> pixels as [<code>Data</code>], if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> was created from supported\nencoded stream format. Platform support for formats vary and may require building\nwith one or more of: SK_ENCODE_JPEG, SK_ENCODE_PNG, SK_ENCODE_WEBP.</p>\n<p>Returns <code>None</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> contents are not encoded.</p>\n<p>Returns: encoded <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_refEncodedData\">https://fiddle.skia.org/c/@Image_refEncodedData</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_subset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_subset</a>(&amp;self, rect: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;IRect&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_subset()</span></div></span></summary><div class=\"docblock\"><p>See [<code>Self::new_subset_with_context</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_subset_with_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_subset_with_context</a>&lt;'a&gt;(\n    &amp;self,\n    rect: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;IRect&gt;,\n    direct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_subset()</span></div></span></summary><div class=\"docblock\"><p>Returns subset of this image.</p>\n<p>Returns <code>None</code> if any of the following are true:</p>\n<ul>\n<li>Subset is empty</li>\n<li>Subset is not contained inside the image’s bounds</li>\n<li>Pixels in the image could not be read or copied</li>\n</ul>\n<p>If this image is texture-backed, the context parameter is required and must match the\ncontext of the source image. If the context parameter is provided, and the image is\nraster-backed, the subset will be converted to texture-backed.</p>\n<ul>\n<li><code>subset</code>   bounds of returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>context</code>  the [<code>gpu::DirectContext</code>] in play, if it exists</li>\n</ul>\n<p>Returns: the subsetted image, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeSubset\">https://fiddle.skia.org/c/@Image_makeSubset</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_subset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">make_subset</a>&lt;'a&gt;(\n    &amp;self,\n    direct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    subset: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;IRect&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns subset of this image.</p>\n<p>Returns <code>None</code> if any of the following are true:\n- Subset is empty - Subset is not contained inside the image’s bounds\n- Pixels in the source image could not be read or copied\n- This image is texture-backed and the provided context is null or does not match the\nsource image’s context.</p>\n<p>If the source image was texture-backed, the resulting image will be texture-backed also.\nOtherwise, the returned image will be raster-backed.</p>\n<ul>\n<li><code>direct</code> - the [<code>gpu::DirectContext</code>] of the source image (<code>None</code> is ok if the source\nimage is not texture-backed).</li>\n<li><code>subset</code> - bounds of returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> Returns: the subsetted image, or <code>None</code></li>\n</ul>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeSubset\">https://fiddle.skia.org/c/@Image_makeSubset</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_mipmaps\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">has_mipmaps</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the image has mipmap levels.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_default_mipmaps\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_default_mipmaps</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an image with the same “base” pixels as the this image, but with mipmap levels\nautomatically generated and attached.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_texture_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_texture_image</a>(\n    &amp;self,\n    context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    mipmapped: skgpu_Mipmapped,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>See [<code>Self::new_texture_image_budgeted</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_texture_image_budgeted\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_texture_image_budgeted</a>(\n    &amp;self,\n    direct_context: &amp;mut RCHandle&lt;GrDirectContext&gt;,\n    mipmapped: skgpu_Mipmapped,\n    budgeted: Budgeted,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture associated with context. Returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is\ncompatible with [<code>crate::Surface</code>] created with <code>dst_color_space</code>. The returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> respects\nmipmapped setting; if mipmapped equals [<code>gpu::Mipmapped::Yes</code>], the backing texture\nallocates mip map levels.</p>\n<p>The mipmapped parameter is effectively treated as <code>No</code> if MIP maps are not supported by the\nGPU.</p>\n<p>Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if the image is already texture-backed, the context matches, and\nmipmapped is compatible with the backing GPU texture. [<code>crate::Budgeted</code>] is ignored in this case.</p>\n<p>Returns <code>None</code> if context is <code>None</code>, or if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> was created with another\n[<code>gpu::DirectContext</code>].</p>\n<ul>\n<li><code>direct_context</code>  the [<code>gpu::DirectContext</code>] in play, if it exists</li>\n<li><code>mipmapped</code>      whether created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> texture must allocate mip map levels</li>\n<li><code>budgeted</code>       whether to count a newly created texture for the returned image\ncounts against the context’s budget.</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_non_texture_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_non_texture_image</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_non_texture_image()</span></div></span></summary><div class=\"docblock\"><p>Returns raster image or lazy image. Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture into\nCPU memory if needed. Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if decoded in raster bitmap,\nor if encoded in a stream.</p>\n<p>Returns <code>None</code> if backed by GPU texture and copy fails.</p>\n<p>Returns: raster image, lazy image, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeNonTextureImage\">https://fiddle.skia.org/c/@Image_makeNonTextureImage</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_non_texture_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">make_non_texture_image</a>&lt;'a&gt;(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns raster image or lazy image. Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture into\nCPU memory if needed. Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if decoded in raster bitmap,\nor if encoded in a stream.</p>\n<p>Returns <code>None</code> if backed by GPU texture and copy fails.</p>\n<p>Returns: raster image, lazy image, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeNonTextureImage\">https://fiddle.skia.org/c/@Image_makeNonTextureImage</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raster_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_raster_image</a>(\n    &amp;self,\n    caching_hint: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SkImage_CachingHint&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_raster_image()</span></div></span></summary><div class=\"docblock\"><p>Returns raster image. Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture into CPU memory,\nor decodes <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from lazy image. Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if decoded in\nraster bitmap.</p>\n<p>Returns <code>None</code> if copy, decode, or pixel read fails.</p>\n<p>If <code>caching_hint</code> is [<code>CachingHint::Allow</code>], pixels may be retained locally.\nIf <code>caching_hint</code> is [<code>CachingHint::Disallow</code>], pixels are not added to the local cache.</p>\n<p>Returns: raster image, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeRasterImage\">https://fiddle.skia.org/c/@Image_makeRasterImage</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_raster_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">make_raster_image</a>&lt;'a&gt;(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    caching_hint: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;SkImage_CachingHint&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns raster image. Copies <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> backed by GPU texture into CPU memory,\nor decodes <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> from lazy image. Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if decoded in\nraster bitmap.</p>\n<p>Returns <code>None</code> if copy, decode, or pixel read fails.</p>\n<p>If <code>caching_hint</code> is [<code>CachingHint::Allow</code>], pixels may be retained locally.\nIf <code>caching_hint</code> is [<code>CachingHint::Disallow</code>], pixels are not added to the local cache.</p>\n<p>Returns: raster image, or <code>None</code></p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeRasterImage\">https://fiddle.skia.org/c/@Image_makeRasterImage</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_filter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_with_filter</a>(\n    &amp;self,\n    _context: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut RCHandle&lt;GrRecordingContext&gt;&gt;,\n    filter: &amp;RCHandle&lt;SkImageFilter&gt;,\n    clip_bounds: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IRect&gt;,\n    subset: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;IRect&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(RCHandle&lt;SkImage&gt;, IRect, IPoint)&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.67.0: use images::make_with_filter()</span></div></span></summary><div class=\"docblock\"><p>Creates filtered <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>. filter processes original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, potentially changing\ncolor, position, and size. subset is the bounds of original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> processed\nby filter. <code>clip_bounds</code> is the expected bounds of the filtered <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>. <code>out_subset</code>\nis required storage for the actual bounds of the filtered <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>. offset is\nrequired storage for translation of returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>.</p>\n<p>Returns <code>None</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> could not be created or if the recording context provided doesn’t\nmatch the GPU context in which the image was created. If <code>None</code> is returned, <code>out_subset</code>\nand offset are undefined.</p>\n<p>Useful for animation of [<code>ImageFilter</code>] that varies size from frame to frame.\nReturned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is created larger than required by filter so that GPU texture\ncan be reused with different sized effects. <code>out_subset</code> describes the valid bounds\nof GPU texture returned. offset translates the returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> to keep subsequent\nanimation frames aligned with respect to each other.</p>\n<ul>\n<li><code>context</code>      the [<code>gpu::RecordingContext</code>] in play - if it exists</li>\n<li><code>filter</code>       how <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is sampled when transformed</li>\n<li><code>subset</code>       bounds of <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> processed by filter</li>\n<li><code>clip_bounds</code>   expected bounds of filtered <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>out_subset</code>    storage for returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> bounds</li>\n<li><code>offset</code>       storage for returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> translation</li>\n</ul>\n<p>Returns: filtered <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a>, or <code>None</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_lazy_generated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_lazy_generated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is backed by an image-generator or other service that creates\nand caches its pixels or texture on-demand.</p>\n<p>Returns: <code>true</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> is created as needed</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_isLazyGenerated_a\">https://fiddle.skia.org/c/@Image_isLazyGenerated_a</a>\nexample: <a href=\"https://fiddle.skia.org/c/@Image_isLazyGenerated_b\">https://fiddle.skia.org/c/@Image_isLazyGenerated_b</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_color_space\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_color_space</a>(\n    &amp;self,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_color_space()</span></div></span></summary><div class=\"docblock\"><p>See [<code>Self::new_color_space_with_context</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_color_space_with_context\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_color_space_with_context</a>&lt;'a&gt;(\n    &amp;self,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n    direct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.64.0: use make_color_space()</span></div></span></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> in target [<code>ColorSpace</code>].\nReturns <code>None</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> could not be created.</p>\n<p>Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if it is in target [<code>ColorSpace</code>].\nOtherwise, converts pixels from <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] to target [<code>ColorSpace</code>].\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> <code>color_space()</code> returns <code>None</code>, <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] is assumed to be <code>s_rgb</code>.</p>\n<p>If this image is texture-backed, the context parameter is required and must match the\ncontext of the source image.</p>\n<ul>\n<li><code>target</code>   [<code>ColorSpace</code>] describing color range of returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n<li><code>direct</code>   The [<code>gpu::DirectContext</code>] in play, if it exists</li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> in target [<code>ColorSpace</code>]</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeColorSpace\">https://fiddle.skia.org/c/@Image_makeColorSpace</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_color_space\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">make_color_space</a>&lt;'a&gt;(\n    &amp;self,\n    direct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> in target [<code>ColorSpace</code>].\nReturns <code>None</code> if <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> could not be created.</p>\n<p>Returns original <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> if it is in target [<code>ColorSpace</code>].\nOtherwise, converts pixels from <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] to target [<code>ColorSpace</code>].\nIf <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> <code>color_space()</code> returns <code>None</code>, <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> [<code>ColorSpace</code>] is assumed to be <code>s_rgb</code>.</p>\n<p>If this image is texture-backed, the context parameter is required and must match the\ncontext of the source image.</p>\n<ul>\n<li><code>direct</code>   The [<code>gpu::DirectContext</code>] in play, if it exists</li>\n<li><code>target</code>   [<code>ColorSpace</code>] describing color range of returned <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a></li>\n</ul>\n<p>Returns: created <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> in target [<code>ColorSpace</code>]</p>\n<p>example: <a href=\"https://fiddle.skia.org/c/@Image_makeColorSpace\">https://fiddle.skia.org/c/@Image_makeColorSpace</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reinterpret_color_space\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reinterpret_color_space</a>(\n    &amp;self,\n    new_color_space: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;RCHandle&lt;SkColorSpace&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImage&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"lay_rs/types/type.Image.html\" title=\"type lay_rs::types::Image\"><code>Image</code></a> identical to this one, but with a different [<code>ColorSpace</code>].\nThis does not convert the underlying pixel data, so the resulting image will draw\ndifferently.</p>\n</div></details></div></details>",0,"lay_rs::types::Image"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RCHandle%3CSkImage%3E\" class=\"impl\"><a href=\"#impl-RCHandle%3CSkImage%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RCHandle&lt;SkImage&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.encode\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">encode</a>&lt;'a&gt;(\n    &amp;self,\n    context: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a mut RCHandle&lt;GrDirectContext&gt;&gt;&gt;,\n    format: SkEncodedImageFormat,\n    quality: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u32.html\">u32</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkData&gt;&gt;</h4></section></div></details>",0,"lay_rs::types::Image"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RCHandle%3CSkPicture%3E\" class=\"impl\"><a href=\"#impl-RCHandle%3CSkPicture%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RCHandle&lt;SkPicture&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.as_image_filter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_image_filter</a>&lt;'a&gt;(\n    &amp;self,\n    crop_rect: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a Rect&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImageFilter&gt;&gt;</h4></section><section id=\"method.into_image_filter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_image_filter</a>&lt;'a&gt;(\n    self,\n    crop_rect: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a Rect&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkImageFilter&gt;&gt;</h4></section></div></details>",0,"lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RCHandle%3CSkPicture%3E\" class=\"impl\"><a href=\"#impl-RCHandle%3CSkPicture%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RCHandle&lt;SkPicture&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.from_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_data</a>(data: &amp;RCHandle&lt;SkData&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkPicture&gt;&gt;</h4></section><section id=\"method.from_bytes\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RCHandle&lt;SkPicture&gt;&gt;</h4></section><section id=\"method.playback\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">playback</a>(&amp;self, canvas: &amp;Canvas)</h4></section><section id=\"method.cull_rect\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cull_rect</a>(&amp;self) -&gt; Rect</h4></section><section id=\"method.unique_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unique_id</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u32.html\">u32</a></h4></section><section id=\"method.serialize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">serialize</a>(&amp;self) -&gt; RCHandle&lt;SkData&gt;</h4></section><section id=\"method.new_placeholder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_placeholder</a>(cull: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;Rect&gt;) -&gt; RCHandle&lt;SkPicture&gt;</h4></section><section id=\"method.approximate_op_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">approximate_op_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.approximate_op_count_nested\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">approximate_op_count_nested</a>(\n    &amp;self,\n    nested: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>&gt;&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.approximate_bytes_used\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">approximate_bytes_used</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.to_shader\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_shader</a>&lt;'a, 'b&gt;(\n    &amp;self,\n    tm: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(SkTileMode, SkTileMode)&gt;&gt;,\n    mode: SkFilterMode,\n    local_matrix: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"struct\" href=\"lay_rs/types/struct.Matrix.html\" title=\"struct lay_rs::types::Matrix\">Matrix</a>&gt;&gt;,\n    tile_rect: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'b Rect&gt;&gt;,\n) -&gt; RCHandle&lt;SkShader&gt;</h4></section></div></details>",0,"lay_rs::types::Picture"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RCHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-RCHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; RCHandle&lt;T&gt;<div class=\"where\">where\n    T: NativeRefCounted + NodeSubtype,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.as_base\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_base</a>(&amp;self) -&gt; &amp;RCHandle&lt;&lt;T as NodeSubtype&gt;::Base&gt;</h4></section><section id=\"method.as_base_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_base_mut</a>(&amp;mut self) -&gt; &amp;mut RCHandle&lt;&lt;T as NodeSubtype&gt;::Base&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_node\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_node</a>(self) -&gt; RCHandle&lt;SkSVGNode&gt;</h4></section></summary><div class=\"docblock\"><p>All concrete node types can be converted to the supertype [<code>Node</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.typed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">typed</a>(self) -&gt; TypedNode</h4></section></summary><div class=\"docblock\"><p>All concrete node types can be converted to a [<code>TypedNode</code>]</p>\n</div></details></div></details>",0,"lay_rs::types::Image","lay_rs::types::Picture"],["<section id=\"impl-Send-for-RCHandle%3CSkImage%3E\" class=\"impl\"><a href=\"#impl-Send-for-RCHandle%3CSkImage%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for RCHandle&lt;SkImage&gt;</h3></section>","Send","lay_rs::types::Image"],["<section id=\"impl-Send-for-RCHandle%3CSkPicture%3E\" class=\"impl\"><a href=\"#impl-Send-for-RCHandle%3CSkPicture%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for RCHandle&lt;SkPicture&gt;</h3></section>","Send","lay_rs::types::Picture"],["<section id=\"impl-Sync-for-RCHandle%3CSkImage%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RCHandle%3CSkImage%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for RCHandle&lt;SkImage&gt;</h3></section>","Sync","lay_rs::types::Image"],["<section id=\"impl-Sync-for-RCHandle%3CSkPicture%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RCHandle%3CSkPicture%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for RCHandle&lt;SkPicture&gt;</h3></section>","Sync","lay_rs::types::Picture"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[140358]}